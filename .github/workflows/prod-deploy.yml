name: 젬파이 커뮤니티 릴리즈 서버 배포
on:
    push:
        branches:
            - master  #마스터에 푸시되었을때만 실행
    workflow_dispatch:
jobs:
    build:
        name: "빌드"
        runs-on: [self-hosted, linux, X64]  # github action을 개발용 서버에서 동작하도록 설정, github 서버에서 돌릴경우 -> runs-on: ubuntu-latest
        outputs:                            # 젬파이 서버가 특정 ip로만 ssh 접속을 허용하기에 허용되는 서버에서 github action을 돌리기 위함이기도 합니다.
            tag: ${{ steps.docker-image-tag-name.outputs.tag }}
        steps:
            - uses: actions/checkout@v2

            - name: Get package.json version  # package.json 버전 가져오기
              id: package-version
              run: |
                  echo "::set-output name=version::$(node -p "require('./package.json').version")"
                  
            - name: Setup Node.js environment  # node.js 셋팅
              uses: actions/setup-node@v2.4.1
              with:
                  node-version: 16  # 버전은 16 (릴리즈 서버에도 16으로 설치되어있음)
            - name: Get yarn cache directory path # yarn cache 셋팅
              id: yarn-cache-dir-path
              run: echo "::set-output name=dir::$(yarn cache dir)"

            - uses: actions/cache@v2 # yarn cache 셋팅
              id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
              with:
                path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
                key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
                restore-keys: |
                  ${{ runner.os }}-yarn-

            - name: Install Dependencies    # 의존 파일 설치
              run: yarn

            - name: Build                   # Nestjs Build
              run: yarn build
              
          
            - name: 빌드압축파일 업로드.  # prod 실행에 필요한 파일만 업로드
              uses: appleboy/scp-action@master
              with:
                  host: ${{ secrets.SSH_HOSTNAME }}
                  username: ${{ secrets.USER_NAME }}
                  # password: ${{ secrets.PASSWORD }}
                  key: ${{ secrets.KEY }}
                  source: "package.json,yarn.lock,firebase-authentication-zempie_dev.json,dist/*"
                  target: ~/buildupload  # 릴리즈 서버에 buildupload라는 디렉토리에 올라갑니다.
                  overwrite: true

    deploy:
        name: "배포"
        runs-on: [self-hosted, linux, X64] # 젬파이 서버가 특정 ip로만 ssh 접속을 허용하기에 허용되는 서버에서 github action을 실행
        needs: build
        env:
            SSH_HOSTNAME: ${{ secrets.SSH_HOSTNAME }}
            USER_NAME: ${{ secrets.USER_NAME }}
            SSH_KEY: ${{ secrets.KEY }}
        steps:
            - uses: actions/checkout@v2

            - name: 업데이트
              uses: appleboy/ssh-action@master
              with:
                  host: ${{ secrets.SSH_HOSTNAME }}
                  username: ${{ secrets.USER_NAME }}
                  key: ${{ secrets.KEY }}
                  script: | 
                      source .bash_profile
                      cd ./zempie-community
                      rm -rf *
                      mv ~/buildupload/* .
                      yarn install --production
                      echo "${{ secrets.ENVFILE }}" > ".env"
                      pm2 restart all --watch
              
              # source .bash_profile -> yarn과 pm2 명령어 사용을 위해 bash_profile 적용
              # cd ./zempie-community -> 배포되는 디렉토리 이동
              # rm -rf * 이전 소스들은 모두 삭제
              # mv ~/buildupload/* .  -> 새로운 버전 소스를 이동
              # yarn install --production -> 릴리즈 구동에 필요한 요소만 설치
              # echo "${{ secrets.ENVFILE }}" -> ".env" -> .env 환경 변수 파일 생성
              # pm2 restart all --watch -> 서버 재시작
